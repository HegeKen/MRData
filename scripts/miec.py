import urllib
import requests
from urllib import parse
import base64
from Crypto.Cipher import AES
import json
from Crypto.Util.Padding import pad

endata = "O63inYnZcET2HTDyJmr+5fVIFUMII7ZU6yIXODg2dRUcoSoT4htMTbrLemBup3TVJmdbNcNW74HS9ahwV7bMsNU5cmKFKkf6343vRiknRlGaoz+oOamsrd8RgtKPKR5WZKh/3+1/pQPi1u0ih/aayWldI86BhqEne3OZNOgVj/+5bP5NzuQi/1KCbg++i8EBJnyumWGPbtin0JKh90BygZzqGU4zN0G+/q/WNtdbJajdrmEkp54+GmRkFpVO3fMwEyMMCiAUie/J6sAvuQyKRB5HWCeqUPbS49F6r7vX3d75GY5MHWeEIIXq/HN4VU5kx6zSqVnYmcsplDgRb/vY6/X/QC2eEpK7y2KXa3Lp5NzeTNx36yLX+V+eNcmqh8mMFJ1vEWKMG9mWxsuF+tMxSSXtMTxhPS6dZwuZ9AAdRYseuGuyYMxcbmaU6np7DBcycqQqumZ9EWyt2YF8sAqXWrX9xyhl+ZKyh7zImF0aacUY1vfC2kWj2j64tMW9HUweS4r/H470panM4v9xWizHHLEl0P4Jmkuf8PQ0bvYJFYOPmBhMH2VbiJlWKukKET/lNkCFAHDGBxJumbtZqpdpNI/z4WXv6cOFBKFaUgrG+m0LKTUr1xzPwBD8BOd6JBQaGh3Q/7LC9O9DM7Szl/uM5MG9Z6XVkW6eYdmu20DY/N1z86udEem9F5QMeVrapSjxasqDu0Zfp9eURgCx6aRm840okzCn2SrMiGicH+9LDMny0/LFI44j86uxNg/wmToV8uW8SY98hhkYu643Oip+4Vy1p6mB0DLZ0qI8AWOvZ4u4ZXQIge+ACdeg6WE7NCQugpphtByTJLxalkx4rfIDkYzEYwBIk6J89ux8j2/NagpUYrvzbuLdtXhqM+7sLQ7Bobhn7oMorWrHf9N2DLvlIrOZAh4PmrEQnJX1d396gbSSycGDEgYCUl/UTw8qDyN2nceOcQ52dlT9oCtH1xole8cXXzvkoTcw2OCNS/kIW6o+Dwnu5peCprVZzHPOrT3GJicisZkl2sr2cKCL2Upv5yarAYmHMiOhdDu5UieDAsvZUA9L1b5TGn/0m9r1raiMawYKihyb1kTrjCHJIg/GhARHyspiWTLkY8cexgu5LGI1J9GkR6DC+hGW8pVoOOYy4suKzrBVy48MYQmq7qIraewwiHEGgD77Cw1pcL/wgdXyfHDiYarSJXPdDKSTAAu65V2QOs56QDrxCQF+peXEuRA9CH7oOQ/3j8tCl18WC86Cknp9P6qJNzndm6WivfieYjKmXMezeRj5rRko/yW8FBnXBhE8Te06tvkqcxnX0tEZcecYHtIWQHRbcLqjICVDxmjJC3LUVhrL3JX8HnGijJoOj48/H2GJ+XDfhDLwPw02m9PeqYJiBFkBiujb9f2hPloOqwCgzyleUcKhs/RrCVpG+ofN2wHQ0Bq4bwJQ6PU="
# endata = "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"
endata = "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"
miui_key = b'miuiotavalided11'
miui_iv = b'0102030405060708'
checkUpdateget = "zbMQ2f3hwqJ3ayjYdJgQ/sLyiphdAvtZo6QCEYSYMCj+5IWoSWOESplfdJ7xyDlKE0ZAq6HUmVfgoAPQFeuKc+GVH3+AU4ux8w+GRSIrNp5tp0sC6HzHUOP/85CEXERLbzPTXj7JGZxhLT89yLZDfr3hy8DKdAe8USnAaqo08rTuOeh+MVbhXzG3de2AF0jrEil1w8byBXw7uIz+Se70Mdw1hwEK/TZ495rz+LX3WeMhlS0tXAPoXpacH+/wPm6gnWQGYWJS/FVPPCsQc6w1eHMaMyVtGAxKiOSyuwOb0y1kjxY19/nYhVP2G6Q0OgVpychoqS3FnmoN4crbZg+i5DwVKzC1nitKKkclzPGx8t4pqMvgEavsdaj9LycpWYVpDYk0UkbUWy6SvCDob1vaDDC9LCXW/INrhywvmm9wqrziA3xbTS0bh42xMVsOwanupwQj95YddJ62ZlimbsTfwS7hJLkcqQ2A9AzVyGsillbPY+Cb5jawVCV2uKIXR/OWk5DbP1EOurHq8pQEGK4WJQuyohm1Ka1CkEE27gufQNYOY5YmigzqQh33rc5eg/OewYUH8KgxQSuN3uFuSlLPVN+hWSdU4Q1ChZ7T2Nsi/jcQ+zLhUTbD9f5yMv1Cb9W2kz2lTy9bAOH1U7ZvVjJGFosLdp0EybKyjZqJjY+SDiHWqRrXXizzx+m2JpOjCgsCpBxMn3SADeNKg+btZ64+Lg=="
getlatestpost = "4G0uzA6IpHVrbETzOMs0I2HrUemozxvcNyUz5Cuw7fNO75hL0w4acQF9pY30b3vHLmqRv9qm90gm+/CSZcFp0ExjgqsFAn+XRiaLq6eZjo/0WoV637T61ipcTuJsLY2L/l6nJmUKHnCC0/1tA37dHQ37ntOm+MsiydLvWKfZ+NdCiTwV0lw9gS4GdZMZCwC9Q8aHmUx8V3YvLPCQdydJ4kzK7Fpw0vDkE61JuPTIrp8m/DLlygYHP6KUQi2WogdmkEWfERpioBXeE991TX7BfCzPA/QgBRvqAD58snd9WKPn2hWsmSxr5TQZ+dBrhr+1+jsKznGujW16Y1QxAb6wMtnlD9R0RgUzHgrEWmcZ8VBLDd35se4Ga9y8zFCSqwzlf/V0r/6tCM7R9H0cla0DQgAKeArB2viS/yk8XD9s9dYDNd8K8YZq1dCUlBgCSn+chV+i2NcCmxHCa4WzBNPbwgAzhov4/AUsLQntDDSIxT156AtfqTYWMkAwwzuWDX6l68LcErY41GbSRvWKRpkWoVD3H7py7FcifsGl673t+mFj+9PkFNWDhr3nK5C8SRTitkF3parzCpmer719YCRCivwD3ah6JwRRAMewjUYf0abai5tJmB5409XlyOeouWp/gDZgQZvjOrGVjeNg8F3QXBl20YkMBKbewW/JxsmpVDRwT1isM4XPatZNnwC+ZdxCyECcae2r4oYT1mXPnFQCCZ1vJ8e/N8xPELdPIVQsk2tlqLfhARhxIy0jMQd93HztV6Qse8lZ1/fC4kuIXemVj3ZMTacwccrd30QxWEdsAZXB8XvHzZM5gQ466IvJHwXSjZUdhQFuhA7TxEP9PidA/AQc96DTSKgIX4wH7jKrfgmstKSk46n0USxbcBc+ULP4WBV/LcXhGWR9IVrGxxKTMQZIhA94YcyYECSIpgkB6WuY/IoaujdqvzTAnH0OTn15sIWCEIxf18NplbpVInh9fJtQVs4IJRtWW6AblaFaEOortpmIZ8Fw4T3bl6Afr90DCSUM3eFaO/1Emz9+yYiggnnH4jAaUONSG8Ik4ffdaDKaYKEKBKi0UEbfW2sXEvFTN5dU/xUtesyz/Wqi5eQCyHQsNrJEDeA6zrLhSiNJOAYf7prQHB5pAiuJsvXRnF4vAG4juxO4o1Ep7h70HcYrk7H0Tbqxf3Y8071Oeo1YBE8BI9eYnzsSH83ost7Fx/FM+PyTEItXXZeEYrnotvBZgw/POhjueRBYmtyTu5WPMxRuTTkEreYuOIVdIY2hfTcu"

def miui_decrypt(encrypted_response):
  decipher = AES.new(miui_key,AES.MODE_CBC,miui_iv)
  decrypted = decipher.decrypt(base64.b64decode(encrypted_response))
  # print(decrypted)
  plaintext = decrypted.decode('utf-8').strip()
  pos = plaintext.rfind('}')
  if pos != -1:
    return json.loads(plaintext[:pos + 1])
  else:
    return json.loads(plaintext)

abc = miui_decrypt(getlatestpost)
print(abc)
print(" - - - - - - - - - - ")
print("LatestRom" in abc)
if "LatestRom" in abc:
  print(abc["LatestRom"]["filename"].__str__().split("?")[0])
# elif "CurrentRom" in abc:
